% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate.R
\name{GenSurrogatePermutations}
\alias{GenSurrogatePermutations}
\title{Generate surrogate permutations}
\usage{
GenSurrogatePermutations(.opt, .k, .a, .cc, .gund, .e, .tests, .path)
}
\arguments{
\item{.cc}{content catalogue instance. A list that includes <I, Z, N, d, d.params> whereby: I content objects, Z popularity distribution, N number of items, d name of popularity distribution, d.params parameters used to generate the distribution}

\item{.gund}{network graph, population per node and graph name - i.e <g, u, g.name>}

\item{.e}{list of origins names to be excluded, including (in addition) .e$cfg, which gives the config params of the excluded origins.}

\item{.tests}{number of permutations}

\item{.path}{string giving the paths to write the surrogate permutations}

\item{cfg}{config parameters, including \code{k} numeric value giving #surrogates, \code{a} numberic value giving min storage size and \code{opt} numeric value indicating the selection policy, this corresponds to the service placement algorithm. currently there are 3 greedy algorithms: largest population first, highest closeness first and swing}
}
\description{
generate surrogate permutations for one origin, those are nodes holding copies of some of the items in the content catalogue but not all. They are restricted by a capacity constraint

The saved permutations can be loaded at the start of a simulation rather than be calculated then, to save simulation time
}
