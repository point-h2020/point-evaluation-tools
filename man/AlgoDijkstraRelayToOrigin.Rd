% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/algorithm.R
\name{AlgoDijkstraRelayToOrigin}
\alias{AlgoDijkstraRelayToOrigin}
\title{Dijkstra based Relay-to-Origin}
\usage{
AlgoDijkstraRelayToOrigin(g, eM, i, w = 0.01)
}
\arguments{
\item{g}{network graph, used by dijkstra}

\item{eM}{edgeMatrix of the graph, providing edge: capacity, load, and hence weight}

\item{i}{Information item demand to be routed}

\item{w}{cost reduction when selecting a caching vs. non-caching publisher}
}
\value{
list of: d: distance matrix (publisher x subscribers) - used for debugging, pen: list of pens of each publisher - used for debugging, l: list of paths from each publisher to each subscriber - used for debugging, ts: multicast tress from the nearest publisher(s) to groups of subscribers, p: nearest publishers
}
\description{
the algorithm calculates a shortest path from each publisher to each subscriber.

and acorrdingly group togheter (in a multicast tree) paths originating from the same publisher towards mutliple subscribers

The algorithm route a streaming demand to the nearest surrogate, following a streaming CDN approach, whereby:

For a first request, a surrogate is selected to serve the demand, the surrogate then is routed to an origin to fetch the stream.

But the surrogate would not act as a local origin (i.e. cache the cotent) for other surrogates! (i.e. it will not participate in the second surrogate-to-origin routing) this is important distinction from VoD CDN, because using the surrogate as an origin may incure additional delay, due to path stretch and the fact that the stream may not be cached any longer in the surrogate.

However, the surrogate does act as local origin for any requests arriving directly from subscribers in the sub-to-surrogate routing (NOT the surrogate-to-origin routing)
}
